// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package MPDCDS_BackendService

import (
	"bytes"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// thrift接口数据返回类型
//
//
//
// Attributes:
//  - Status
//  - Msg
//  - Token
type Auth struct {
	Status int16  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
	Token  string `thrift:"token,3" db:"token" json:"token"`
}

func NewAuth() *Auth {
	return &Auth{}
}

func (p *Auth) GetStatus() int16 {
	return p.Status
}

func (p *Auth) GetMsg() string {
	return p.Msg
}

func (p *Auth) GetToken() string {
	return p.Token
}
func (p *Auth) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Auth) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *Auth) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *Auth) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *Auth) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Auth"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Auth) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *Auth) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *Auth) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:token: ", p), err)
	}
	return err
}

func (p *Auth) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Auth(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - Data
type FileDirInfo struct {
	Status int16               `thrift:"status,1" db:"status" json:"status"`
	Msg    string              `thrift:"msg,2" db:"msg" json:"msg"`
	Data   []map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewFileDirInfo() *FileDirInfo {
	return &FileDirInfo{}
}

func (p *FileDirInfo) GetStatus() int16 {
	return p.Status
}

func (p *FileDirInfo) GetMsg() string {
	return p.Msg
}

func (p *FileDirInfo) GetData() []map[string]string {
	return p.Data
}
func (p *FileDirInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileDirInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *FileDirInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *FileDirInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[string]string, 0, size)
	p.Data = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[string]string, size)
		_elem0 := tMap
		for i := 0; i < size; i++ {
			var _key1 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key1 = v
			}
			var _val2 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val2 = v
			}
			_elem0[_key1] = _val2
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.Data = append(p.Data, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileDirInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileDirInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileDirInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *FileDirInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *FileDirInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.MAP, len(p.Data)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Data {
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range v {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *FileDirInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileDirInfo(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
type DirAuth struct {
	Status int16  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewDirAuth() *DirAuth {
	return &DirAuth{}
}

func (p *DirAuth) GetStatus() int16 {
	return p.Status
}

func (p *DirAuth) GetMsg() string {
	return p.Msg
}
func (p *DirAuth) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DirAuth) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *DirAuth) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *DirAuth) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DirAuth"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DirAuth) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *DirAuth) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *DirAuth) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DirAuth(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - Data
type FileInfo struct {
	Status int16             `thrift:"status,1" db:"status" json:"status"`
	Msg    string            `thrift:"msg,2" db:"msg" json:"msg"`
	Data   map[string]string `thrift:"data,3" db:"data" json:"data"`
}

func NewFileInfo() *FileInfo {
	return &FileInfo{}
}

func (p *FileInfo) GetStatus() int16 {
	return p.Status
}

func (p *FileInfo) GetMsg() string {
	return p.Msg
}

func (p *FileInfo) GetData() map[string]string {
	return p.Data
}
func (p *FileInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *FileInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *FileInfo) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Data = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key3 = v
		}
		var _val4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val4 = v
		}
		p.Data[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FileInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Data)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Data {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
	}
	return err
}

func (p *FileInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileInfo(%+v)", *p)
}

//
// 无返回数据，只需返回状态时，使用此结构体作为标准返回类型
//
//
// Attributes:
//  - Status
//  - Msg
type Result_ struct {
	Status int16  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewResult_() *Result_ {
	return &Result_{}
}

func (p *Result_) GetStatus() int16 {
	return p.Status
}

func (p *Result_) GetMsg() string {
	return p.Msg
}
func (p *Result_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Result_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *Result_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *Result_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result_(%+v)", *p)
}

// thrift接口数据接收参数类型
// 1：access_id 基本信息表主键
// 2：file_id   文件信息表主键
// 3：start_time开始下载时间 yyyy-MM-dd HH:mm:ss
// 4：end_time  结束下载时间 yyyy-MM-dd HH:mm:ss
//
// Attributes:
//  - AccessID
//  - FileID
//  - StartTime
//  - EndTime
type ApiDownLoad struct {
	AccessID  string `thrift:"access_id,1" db:"access_id" json:"access_id"`
	FileID    string `thrift:"file_id,2" db:"file_id" json:"file_id"`
	StartTime string `thrift:"start_time,3" db:"start_time" json:"start_time"`
	EndTime   string `thrift:"end_time,4" db:"end_time" json:"end_time"`
}

func NewApiDownLoad() *ApiDownLoad {
	return &ApiDownLoad{}
}

func (p *ApiDownLoad) GetAccessID() string {
	return p.AccessID
}

func (p *ApiDownLoad) GetFileID() string {
	return p.FileID
}

func (p *ApiDownLoad) GetStartTime() string {
	return p.StartTime
}

func (p *ApiDownLoad) GetEndTime() string {
	return p.EndTime
}
func (p *ApiDownLoad) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ApiDownLoad) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AccessID = v
	}
	return nil
}

func (p *ApiDownLoad) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FileID = v
	}
	return nil
}

func (p *ApiDownLoad) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *ApiDownLoad) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *ApiDownLoad) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ApiDownLoad"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ApiDownLoad) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("access_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:access_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.AccessID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.access_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:access_id: ", p), err)
	}
	return err
}

func (p *ApiDownLoad) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("file_id", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:file_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.file_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:file_id: ", p), err)
	}
	return err
}

func (p *ApiDownLoad) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time: ", p), err)
	}
	if err := oprot.WriteString(string(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time: ", p), err)
	}
	return err
}

func (p *ApiDownLoad) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_time", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:end_time: ", p), err)
	}
	if err := oprot.WriteString(string(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_time (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:end_time: ", p), err)
	}
	return err
}

func (p *ApiDownLoad) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApiDownLoad(%+v)", *p)
}

type MPDCDS_BackendService interface { //
	//多协议数据采集和分配系统接口服务

	// 权限验证接口
	// 1:用户名
	// 2：密码
	// 返回值：token
	//
	//
	// Parameters:
	//  - User
	//  - Password
	Auth(ctx context.Context, user string, password string) (r *Auth, err error)
	// 目录信息和列表信息接口
	// 1:token
	// 2:pwd   当前目录地址
	// 返回值：目录和文件列表
	//
	//
	// Parameters:
	//  - Token
	//  - Pwd
	Lists(ctx context.Context, token string, pwd string) (r *FileDirInfo, err error)
	// 判断当前用户是否有权限访问该目录
	// 1:token
	// 2:absPath   当前目录绝对路径
	// 返回值  true/false
	//
	// Parameters:
	//  - Token
	//  - AbsPath
	DirAuth(ctx context.Context, token string, absPath string) (r *DirAuth, err error)
	// 获取当前文件地址
	// 1:token
	// 2:absPath   当前目录绝对路径
	// 3:fileName  文件名称
	// 返回值      当前文件实际地址
	//
	// Parameters:
	//  - Token
	//  - AbsPath
	//  - FileName
	File(ctx context.Context, token string, absPath string, fileName string) (r *FileInfo, err error)
	// 记录下载文件信息
	// 1：token
	// 2：apidown 下载文件信息
	// 返回值      status为0正常，小于0异常
	//
	//
	// Parameters:
	//  - Token
	//  - ApiDownLoad
	SaveDownLoadFileInfo(ctx context.Context, token string, apiDownLoad *ApiDownLoad) (r *Result_, err error)
}

//
//多协议数据采集和分配系统接口服务
type MPDCDS_BackendServiceClient struct {
	c thrift.TClient
}

func NewMPDCDS_BackendServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MPDCDS_BackendServiceClient {
	return &MPDCDS_BackendServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMPDCDS_BackendServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MPDCDS_BackendServiceClient {
	return &MPDCDS_BackendServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMPDCDS_BackendServiceClient(c thrift.TClient) *MPDCDS_BackendServiceClient {
	return &MPDCDS_BackendServiceClient{
		c: c,
	}
}

func (p *MPDCDS_BackendServiceClient) Client_() thrift.TClient {
	return p.c
}

// 权限验证接口
// 1:用户名
// 2：密码
// 返回值：token
//
//
// Parameters:
//  - User
//  - Password
func (p *MPDCDS_BackendServiceClient) Auth(ctx context.Context, user string, password string) (r *Auth, err error) {
	var _args5 MPDCDS_BackendServiceAuthArgs
	_args5.User = user
	_args5.Password = password
	var _result6 MPDCDS_BackendServiceAuthResult
	if err = p.Client_().Call(ctx, "auth", &_args5, &_result6); err != nil {
		return
	}
	return _result6.GetSuccess(), nil
}

// 目录信息和列表信息接口
// 1:token
// 2:pwd   当前目录地址
// 返回值：目录和文件列表
//
//
// Parameters:
//  - Token
//  - Pwd
func (p *MPDCDS_BackendServiceClient) Lists(ctx context.Context, token string, pwd string) (r *FileDirInfo, err error) {
	var _args7 MPDCDS_BackendServiceListsArgs
	_args7.Token = token
	_args7.Pwd = pwd
	var _result8 MPDCDS_BackendServiceListsResult
	if err = p.Client_().Call(ctx, "lists", &_args7, &_result8); err != nil {
		return
	}
	return _result8.GetSuccess(), nil
}

// 判断当前用户是否有权限访问该目录
// 1:token
// 2:absPath   当前目录绝对路径
// 返回值  true/false
//
// Parameters:
//  - Token
//  - AbsPath
func (p *MPDCDS_BackendServiceClient) DirAuth(ctx context.Context, token string, absPath string) (r *DirAuth, err error) {
	var _args9 MPDCDS_BackendServiceDirAuthArgs
	_args9.Token = token
	_args9.AbsPath = absPath
	var _result10 MPDCDS_BackendServiceDirAuthResult
	if err = p.Client_().Call(ctx, "dirAuth", &_args9, &_result10); err != nil {
		return
	}
	return _result10.GetSuccess(), nil
}

// 获取当前文件地址
// 1:token
// 2:absPath   当前目录绝对路径
// 3:fileName  文件名称
// 返回值      当前文件实际地址
//
// Parameters:
//  - Token
//  - AbsPath
//  - FileName
func (p *MPDCDS_BackendServiceClient) File(ctx context.Context, token string, absPath string, fileName string) (r *FileInfo, err error) {
	var _args11 MPDCDS_BackendServiceFileArgs
	_args11.Token = token
	_args11.AbsPath = absPath
	_args11.FileName = fileName
	var _result12 MPDCDS_BackendServiceFileResult
	if err = p.Client_().Call(ctx, "file", &_args11, &_result12); err != nil {
		return
	}
	return _result12.GetSuccess(), nil
}

// 记录下载文件信息
// 1：token
// 2：apidown 下载文件信息
// 返回值      status为0正常，小于0异常
//
//
// Parameters:
//  - Token
//  - ApiDownLoad
func (p *MPDCDS_BackendServiceClient) SaveDownLoadFileInfo(ctx context.Context, token string, apiDownLoad *ApiDownLoad) (r *Result_, err error) {
	var _args13 MPDCDS_BackendServiceSaveDownLoadFileInfoArgs
	_args13.Token = token
	_args13.ApiDownLoad = apiDownLoad
	var _result14 MPDCDS_BackendServiceSaveDownLoadFileInfoResult
	if err = p.Client_().Call(ctx, "saveDownLoadFileInfo", &_args13, &_result14); err != nil {
		return
	}
	return _result14.GetSuccess(), nil
}

type MPDCDS_BackendServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MPDCDS_BackendService
}

func (p *MPDCDS_BackendServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MPDCDS_BackendServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MPDCDS_BackendServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMPDCDS_BackendServiceProcessor(handler MPDCDS_BackendService) *MPDCDS_BackendServiceProcessor {

	self15 := &MPDCDS_BackendServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self15.processorMap["auth"] = &mPDCDS_BackendServiceProcessorAuth{handler: handler}
	self15.processorMap["lists"] = &mPDCDS_BackendServiceProcessorLists{handler: handler}
	self15.processorMap["dirAuth"] = &mPDCDS_BackendServiceProcessorDirAuth{handler: handler}
	self15.processorMap["file"] = &mPDCDS_BackendServiceProcessorFile{handler: handler}
	self15.processorMap["saveDownLoadFileInfo"] = &mPDCDS_BackendServiceProcessorSaveDownLoadFileInfo{handler: handler}
	return self15
}

func (p *MPDCDS_BackendServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x16 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x16.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x16

}

type mPDCDS_BackendServiceProcessorAuth struct {
	handler MPDCDS_BackendService
}

func (p *mPDCDS_BackendServiceProcessorAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MPDCDS_BackendServiceAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MPDCDS_BackendServiceAuthResult{}
	var retval *Auth
	var err2 error
	if retval, err2 = p.handler.Auth(ctx, args.User, args.Password); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing auth: "+err2.Error())
		oprot.WriteMessageBegin("auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mPDCDS_BackendServiceProcessorLists struct {
	handler MPDCDS_BackendService
}

func (p *mPDCDS_BackendServiceProcessorLists) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MPDCDS_BackendServiceListsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lists", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MPDCDS_BackendServiceListsResult{}
	var retval *FileDirInfo
	var err2 error
	if retval, err2 = p.handler.Lists(ctx, args.Token, args.Pwd); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lists: "+err2.Error())
		oprot.WriteMessageBegin("lists", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("lists", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mPDCDS_BackendServiceProcessorDirAuth struct {
	handler MPDCDS_BackendService
}

func (p *mPDCDS_BackendServiceProcessorDirAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MPDCDS_BackendServiceDirAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dirAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MPDCDS_BackendServiceDirAuthResult{}
	var retval *DirAuth
	var err2 error
	if retval, err2 = p.handler.DirAuth(ctx, args.Token, args.AbsPath); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dirAuth: "+err2.Error())
		oprot.WriteMessageBegin("dirAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("dirAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mPDCDS_BackendServiceProcessorFile struct {
	handler MPDCDS_BackendService
}

func (p *mPDCDS_BackendServiceProcessorFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MPDCDS_BackendServiceFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("file", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MPDCDS_BackendServiceFileResult{}
	var retval *FileInfo
	var err2 error
	if retval, err2 = p.handler.File(ctx, args.Token, args.AbsPath, args.FileName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing file: "+err2.Error())
		oprot.WriteMessageBegin("file", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("file", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mPDCDS_BackendServiceProcessorSaveDownLoadFileInfo struct {
	handler MPDCDS_BackendService
}

func (p *mPDCDS_BackendServiceProcessorSaveDownLoadFileInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MPDCDS_BackendServiceSaveDownLoadFileInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("saveDownLoadFileInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MPDCDS_BackendServiceSaveDownLoadFileInfoResult{}
	var retval *Result_
	var err2 error
	if retval, err2 = p.handler.SaveDownLoadFileInfo(ctx, args.Token, args.ApiDownLoad); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveDownLoadFileInfo: "+err2.Error())
		oprot.WriteMessageBegin("saveDownLoadFileInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("saveDownLoadFileInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - User
//  - Password
type MPDCDS_BackendServiceAuthArgs struct {
	User     string `thrift:"user,1" db:"user" json:"user"`
	Password string `thrift:"password,2" db:"password" json:"password"`
}

func NewMPDCDS_BackendServiceAuthArgs() *MPDCDS_BackendServiceAuthArgs {
	return &MPDCDS_BackendServiceAuthArgs{}
}

func (p *MPDCDS_BackendServiceAuthArgs) GetUser() string {
	return p.User
}

func (p *MPDCDS_BackendServiceAuthArgs) GetPassword() string {
	return p.Password
}
func (p *MPDCDS_BackendServiceAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("auth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MPDCDS_BackendServiceAuthResult struct {
	Success *Auth `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMPDCDS_BackendServiceAuthResult() *MPDCDS_BackendServiceAuthResult {
	return &MPDCDS_BackendServiceAuthResult{}
}

var MPDCDS_BackendServiceAuthResult_Success_DEFAULT *Auth

func (p *MPDCDS_BackendServiceAuthResult) GetSuccess() *Auth {
	if !p.IsSetSuccess() {
		return MPDCDS_BackendServiceAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MPDCDS_BackendServiceAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MPDCDS_BackendServiceAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Auth{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("auth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MPDCDS_BackendServiceAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceAuthResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Pwd
type MPDCDS_BackendServiceListsArgs struct {
	Token string `thrift:"token,1" db:"token" json:"token"`
	Pwd   string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewMPDCDS_BackendServiceListsArgs() *MPDCDS_BackendServiceListsArgs {
	return &MPDCDS_BackendServiceListsArgs{}
}

func (p *MPDCDS_BackendServiceListsArgs) GetToken() string {
	return p.Token
}

func (p *MPDCDS_BackendServiceListsArgs) GetPwd() string {
	return p.Pwd
}
func (p *MPDCDS_BackendServiceListsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceListsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceListsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceListsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lists_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceListsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceListsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceListsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceListsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MPDCDS_BackendServiceListsResult struct {
	Success *FileDirInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMPDCDS_BackendServiceListsResult() *MPDCDS_BackendServiceListsResult {
	return &MPDCDS_BackendServiceListsResult{}
}

var MPDCDS_BackendServiceListsResult_Success_DEFAULT *FileDirInfo

func (p *MPDCDS_BackendServiceListsResult) GetSuccess() *FileDirInfo {
	if !p.IsSetSuccess() {
		return MPDCDS_BackendServiceListsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MPDCDS_BackendServiceListsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MPDCDS_BackendServiceListsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceListsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &FileDirInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceListsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lists_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceListsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MPDCDS_BackendServiceListsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceListsResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - AbsPath
type MPDCDS_BackendServiceDirAuthArgs struct {
	Token   string `thrift:"token,1" db:"token" json:"token"`
	AbsPath string `thrift:"absPath,2" db:"absPath" json:"absPath"`
}

func NewMPDCDS_BackendServiceDirAuthArgs() *MPDCDS_BackendServiceDirAuthArgs {
	return &MPDCDS_BackendServiceDirAuthArgs{}
}

func (p *MPDCDS_BackendServiceDirAuthArgs) GetToken() string {
	return p.Token
}

func (p *MPDCDS_BackendServiceDirAuthArgs) GetAbsPath() string {
	return p.AbsPath
}
func (p *MPDCDS_BackendServiceDirAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceDirAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceDirAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AbsPath = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceDirAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dirAuth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceDirAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceDirAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("absPath", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:absPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.AbsPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.absPath (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:absPath: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceDirAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceDirAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MPDCDS_BackendServiceDirAuthResult struct {
	Success *DirAuth `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMPDCDS_BackendServiceDirAuthResult() *MPDCDS_BackendServiceDirAuthResult {
	return &MPDCDS_BackendServiceDirAuthResult{}
}

var MPDCDS_BackendServiceDirAuthResult_Success_DEFAULT *DirAuth

func (p *MPDCDS_BackendServiceDirAuthResult) GetSuccess() *DirAuth {
	if !p.IsSetSuccess() {
		return MPDCDS_BackendServiceDirAuthResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MPDCDS_BackendServiceDirAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MPDCDS_BackendServiceDirAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceDirAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &DirAuth{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceDirAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dirAuth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceDirAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MPDCDS_BackendServiceDirAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceDirAuthResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - AbsPath
//  - FileName
type MPDCDS_BackendServiceFileArgs struct {
	Token    string `thrift:"token,1" db:"token" json:"token"`
	AbsPath  string `thrift:"absPath,2" db:"absPath" json:"absPath"`
	FileName string `thrift:"fileName,3" db:"fileName" json:"fileName"`
}

func NewMPDCDS_BackendServiceFileArgs() *MPDCDS_BackendServiceFileArgs {
	return &MPDCDS_BackendServiceFileArgs{}
}

func (p *MPDCDS_BackendServiceFileArgs) GetToken() string {
	return p.Token
}

func (p *MPDCDS_BackendServiceFileArgs) GetAbsPath() string {
	return p.AbsPath
}

func (p *MPDCDS_BackendServiceFileArgs) GetFileName() string {
	return p.FileName
}
func (p *MPDCDS_BackendServiceFileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceFileArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceFileArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AbsPath = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceFileArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceFileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("file_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("absPath", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:absPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.AbsPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.absPath (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:absPath: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceFileArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fileName: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fileName: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MPDCDS_BackendServiceFileResult struct {
	Success *FileInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMPDCDS_BackendServiceFileResult() *MPDCDS_BackendServiceFileResult {
	return &MPDCDS_BackendServiceFileResult{}
}

var MPDCDS_BackendServiceFileResult_Success_DEFAULT *FileInfo

func (p *MPDCDS_BackendServiceFileResult) GetSuccess() *FileInfo {
	if !p.IsSetSuccess() {
		return MPDCDS_BackendServiceFileResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MPDCDS_BackendServiceFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MPDCDS_BackendServiceFileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceFileResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &FileInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceFileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("file_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceFileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MPDCDS_BackendServiceFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceFileResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - ApiDownLoad
type MPDCDS_BackendServiceSaveDownLoadFileInfoArgs struct {
	Token       string       `thrift:"token,1" db:"token" json:"token"`
	ApiDownLoad *ApiDownLoad `thrift:"apiDownLoad,2" db:"apiDownLoad" json:"apiDownLoad"`
}

func NewMPDCDS_BackendServiceSaveDownLoadFileInfoArgs() *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs {
	return &MPDCDS_BackendServiceSaveDownLoadFileInfoArgs{}
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) GetToken() string {
	return p.Token
}

var MPDCDS_BackendServiceSaveDownLoadFileInfoArgs_ApiDownLoad_DEFAULT *ApiDownLoad

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) GetApiDownLoad() *ApiDownLoad {
	if !p.IsSetApiDownLoad() {
		return MPDCDS_BackendServiceSaveDownLoadFileInfoArgs_ApiDownLoad_DEFAULT
	}
	return p.ApiDownLoad
}
func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) IsSetApiDownLoad() bool {
	return p.ApiDownLoad != nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Token = v
	}
	return nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) ReadField2(iprot thrift.TProtocol) error {
	p.ApiDownLoad = &ApiDownLoad{}
	if err := p.ApiDownLoad.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApiDownLoad), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("saveDownLoadFileInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err)
	}
	if err := oprot.WriteString(string(p.Token)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apiDownLoad", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:apiDownLoad: ", p), err)
	}
	if err := p.ApiDownLoad.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApiDownLoad), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:apiDownLoad: ", p), err)
	}
	return err
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceSaveDownLoadFileInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MPDCDS_BackendServiceSaveDownLoadFileInfoResult struct {
	Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMPDCDS_BackendServiceSaveDownLoadFileInfoResult() *MPDCDS_BackendServiceSaveDownLoadFileInfoResult {
	return &MPDCDS_BackendServiceSaveDownLoadFileInfoResult{}
}

var MPDCDS_BackendServiceSaveDownLoadFileInfoResult_Success_DEFAULT *Result_

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoResult) GetSuccess() *Result_ {
	if !p.IsSetSuccess() {
		return MPDCDS_BackendServiceSaveDownLoadFileInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Result_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("saveDownLoadFileInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MPDCDS_BackendServiceSaveDownLoadFileInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MPDCDS_BackendServiceSaveDownLoadFileInfoResult(%+v)", *p)
}
